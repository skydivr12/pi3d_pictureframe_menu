#!/bin/bash

. ~/pic_frame/src/picture_frame_variables


change_system_name() {
  echo " Raspberry Pi computers are tasty targets for internet hackers. It is"
  echo " recommended that you change the system name. It can be anything you want."
  echo " Do you want to change the name of the system?"
  select i in Yes No; do
    if [ "$i" == "Yes" ]; then
      read -p " What would you like to change it to? : " HOSTNAME
      sudo raspi-config nonint do_hostname $HOSTNAME
      echo " Hostname has been changed to $HOSTNAME."
      break
    elif [ "$i" == "No" ]; then
      echo " You have chosen not to change the hostname at this time."
      break
    else
      echo "$ERR_REPLY1"
    fi
  done
}

change_system_password() {
  echo " Raspberry Pi computers are tasty targets for internet hackers. It is"
  echo " recommended that you change the password. You should make it a strong one."
  echo " Do you want to change the login password?"
  select i in "Yes" "No"; do
    if [ "$i" == "Yes" ]; then
      echo " You will first enter the current password. Then you will enter the new"
      echo " password twice. The passwords will not be visible while you type."
      passwd
      break
    elif [ "$i" == "No" ]; then
      echo " You have chosen not to change your login password at this time."
      break
    else
      echo "$ERR_REPLY1"
      continue
    fi
  done
}

change_filesharing_password() {
  echo " Your filesharing password is used for local network filesharing. this will be"
  echo " the password used for transfering files from other computers on your local network."
  echo " Do you want to change your filesharing password?"
  select i in "Yes" "No"; do
    if [ "$i" == "Yes" ]; then
      echo " Enter a password for filesharing on your local network."
      echo " You will have to enter it twice and it will not be displayed while you type."
      sudo smbpasswd -a pi
      break
    elif  [ "$i" == "No" ]; then
      break
    else
      echo "$ERR_REPLY1"
    fi
  done
}

reset_pictureframe() {
  . ~/pic_frame/System_Tools

  remove_static_ip

  for f in "${MAILSOURCES[@]}"; do
    sudo rm /usr/local/bin/$f.mail.py
    sudo rm $BIN_DIR/$f.mail.py
  done

  disable_frame_services

  sudo cp $BAK_DIR/display_on.timer.backup $SYS_DIR/display_on.timer
  sudo cp $BAK_DIR/display_off.timer.backup $SYS_DIR/display_off.timer

  if [ -f "$RC1" ]; then sudo rm "$RC1"; fi
  if [ -f "$RC2" ]; then sudo rm "$RC2"; fi

  turn desktop_on
}

setup_cloud_account() {
  get_RCSOURCES
  LEN1="${#RCSOURCES1[@]}"
  if [ "$LEN1" -eq 0 ]; then
    echo " We are going to setup a google drive connection for your picture"
    echo " frame.  You can have as many google drives connected as you want"
    echo " and the picture frame will keep them seperate from each other."
    echo " You will also be able to display pictures from all google drives,"
    echo " just one google drive, or just one folder in any google drive."
    echo " It looks like this is your first google drive connection.  Pay"
    echo " close attention to the following instructions to ensure proper"
    echo " operation.  You can write them down or take a picture if you need."
    echo " Your google account name is your email address without @gmail.com."
    echo ""
    sleep 15
    echo " This next series of questions sets up access permission to your"
    echo " google drive.  First, type 'n' for new remote and hit 'enter'."
    echo " Next, type 'your-google-account-name' and hit 'enter'. Type in"
    echo " the number that corresponds to Google Drive. At the time of this"
    echo " writing, it was number 12. Then hit 'enter'."
    echo " Press 'enter' two more times. Press '1' and 'enter'."
    echo " Press 'enter' two more times again. Press 'n' and 'enter' for"
    echo " advanced config. Press 'y' and 'enter' for auto config."
    echo " A web browser will open, log into your google account and grant"
    echo " permission. Close the browser then press 'n' and 'enter' for team"
    echo " drive. Press 'y' and 'enter'. if you want to add another google"
    echo " drive connection press 'n' for new remote and go through the"
    echo " process again. You can always add another connection at any time."
    echo " When you are done press 'q' and 'enter' to quit this config setup."
    read -p " Press enter when you are ready to proceed." nothing
  elif [ "$LEN1" -gt 0 ]; then
    echo " You've done this before. Just read and follow the instructions and"
    echo " you'll be fine."
  fi
  # Configure rclone
  rclone config
  get_new_connections
  for C in "${NEW_CONNECTIONS[@]}"; do
    echo " The name you provided is $C"
    echo " Do you want to use this account to also download pictures from email?"
    select i in "Yes" "No"; do
      if [ "$i" == "Yes" ]; then
        echo " Is this your email address : $C@gmail.com ?"
        select i in "Yes" "No"; do
          if [ "$i" == "Yes" ]; then
            EMAILID=$C
            break
          elif [ "$i" == "No" ]; then
            get_email_id
            lnum=$(grep -n "$C" "$RC1" | cut -d: -f1)
            sed "${lnum}s/$C/$EMAILID/" $RC1
            break
          else
            echo "$ERR_REPLY1"
          fi
          get_email_passwd
          create_mail_file
        done
        break
      elif [ "$i" == "No" ]; then
        break
      else
        echo "$ERR_REPLY1"
      fi
    done
  done
  sudo cp $RC1 $RC2 ~/pic_frame/backups/
}


add_new_email_connection() {
  echo " Do you want to setup a new email account?"
  select i in "Yes" "No"; do
    if [ "$i" == "Yes" ]; then
      echo " Will this email have its own google drive?"
      select i in "Yes" "No"; do
        if [ "$i" == "Yes" ]; then
          echo " Have you already setup the google drive connection?"
          select i in "Yes" "No"; do
            if [ "$i" == "Yes" ]; then
              get_RCSOURCES
              echo " Select which google drive connection you want to use with this email connection."
              select f in "${RCSOURCES1[@]}" "None"; do
                echo " You selected $f"
                if [ "$f" == "None" ]; then
                  setup_cloud_account
                  break
                elif [[ "${RCSOURCES1[@]}" =~ "$f" ]]; then
                  echo " Is this your email address : $f@gmail.com ?"
                  select i in "Yes" "No"; do
                    if [ "$i" == "Yes" ]; then
                      EMAILID=$f
                      break
                    elif [ "$i" == "No" ]; then
                      get_email_id
                      lnum=$(grep -n "$C" "$RC1" | cut -d: -f1)
                      sed "${lnum}s/$C/$EMAILID/" $RC1
                      break
                    else
                      echo "$ERR_REPLY1"
                    fi
                    get_email_passwd
                    create_mail_file
                  done
                  break
                else
                  echo "$ERR_REPLY1"
                fi
              done
              break
            elif [ "$i" == "No" ]; then
              setup_cloud_account
              break
            else
              echo "$ERR_REPLY1"
            fi
          done
          break
        elif [ "$i" == "No" ]; then
          get_email_id
          get_email_passwd
          create_mail_file
          break
        else
          echo "$ERR_REPLY1"
        fi
      done
      break
    elif [ "$i" == "No" ]; then
      echo " You selected No. Going back."
      break
    else
      echo "$ERR_REPLY1"
    fi
  done
}




setup_master() {
  . ~/pic_frame/src/Display_Settings
  . ~/pic_frame/src/System_Tools

  change_filesharing_password
  setup_cloud_account
  add_new_email_connection
  use_default_slideshow_settings
  set_display_on_time
  set_display_off_time
  enable_frame_services
  set_display_overscan
  change_system_password
  change_system_name

echo " Would you like to dismiss the desktop now?"
  select OPT in "Yes" "No"; do
    if [ "$OPT" == "" ]; then
      echo " invalid option. Please try again."
    elif [ "$OPT" == "Yes" ]; then
      turn_desktop_off
      break
    elif [ "$OPT" == "No" ]; then
      echo " You have chosen to leave the desktop on. The slideshow will not work until it is disabled."
      echo " You can turn the desktop off later from the System Tools menu."
      break
    else
      echo " Invalid option. Please try again."
    fi
  done
}

Back() {
  echo " This is a function"
}





