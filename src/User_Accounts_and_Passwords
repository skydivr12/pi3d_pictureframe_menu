#!/bin/bash

. ~/pic_frame/src/picture_frame_functions

change_system_name() {
  echo " Do you want to change the name of the system?"
  select i in "Yes" "No"; do
    if [ "$i" == "Yes" ]; then
      read -p " What would you like to change it to? : " HOSTNAME
      sudo raspi-config nonint do_hostname $HOSTNAME
      echo " Hostname has been changed to $HOSTNAME."
      break
    elif [ "$i" == "No" ]; then
      echo " You have chosen not to change the hostname at this time."
      break
    else
      echo "$ERR_REPLY1"
      continue
    fi
  done
}

change_system_password() {
  echo " Do you want to change the login password?"
  select i in "Yes" "No"; do
    if [ "$i" == "Yes" ]; then
      echo " You will first enter the current password. Then you will enter the new"
      echo " password twice. The passwords will not be visible while you type."
      passwd
      break
    elif [ "$i" == "No" ]; then
      echo " You have chosen not to change your login password at this time."
      break
    else
      echo "$ERR_REPLY1"
      continue
    fi
  done
}

change_filesharing_password() {
  echo " Do you want to change your filesharing password?"
  select i in "Yes" "No"; do
    if [ "$i" == "Yes" ]; then
      echo " Enter a password for filesharing on your local network."
      echo " This will allow you to transfer pictures directly onto the frame from another network computer."
      echo " You will have to enter it twice and it will not be displayed while you type."
      sudo smbpasswd -a pi
      break
    elif  [ "$i" == "No" ]; then
      break
    else
      echo "$ERR_REPLY1"
    fi
  done
}

reset_pictureframe() {
  . ~/pic_frame/System_Tools
  remove_static_ip
  sudo rm /usr/local/bin/$EMAILS_FIL
  sudo rm $EMAILS
  sudo cp $BAK_DIR/display_on.timer.backup $SYS_DIR/display_on.timer
  sudo cp $BAK_DIR/display_off.timer.backup $SYS_DIR/display_off.timer

  if [ -f "$RC1" ]; then sudo rm "$RC1"; fi
  if [ -f "$RC2" ]; then sudo rm "$RC2"; fi

  desktop_on
}


setup_cloud_account() {
  get_RCSOURCES
  LEN1="${#RCSOURCES1[@]}"
#  echo "${RCSOURCES1[@]}"
#  sleep 5

  if [ "$LEN1" -eq 0 ]; then
    echo " We are going to setup a google drive connection for your picture"
    sleep 1
    echo " frame.  You can have as many google drives connected as you want"
    sleep 1
    echo " and the picture frame will keep them seperate from each other."
    sleep 1
    echo " You will also be able to display pictures from all google drives,"
    sleep 1
    echo " just one google drive, or just one folder in any google drive."
    sleep 1
    echo " It looks like this is your first google drive connection.  Pay"
    sleep 1
    echo " close attention to the following instructions to ensure proper"
    sleep 1
    echo " operation.  You can write them down or take a picture if you need."
    sleep 1
    echo " Your google account name is your email address without @gmail.com."
    sleep 1
    echo ""
    sleep 15
    echo " This next series of questions sets up access permission to your"
    sleep 1
    echo " google drive.  First, type 'n' for new remote and hit 'enter'."
    sleep 1
    echo " Next, type 'your-google-account-name' and hit 'enter'. Type in"
    sleep 1
    echo " the number that corresponds to Google Drive. At the time of this"
    sleep 1
    echo " writing, it was number 12. Then hit 'enter'."
    sleep 1
    echo " Press 'enter' two more times. Press '1' and 'enter'."
    sleep 1
    echo " Press 'enter' two more times again. Press 'n' and 'enter' for"
    sleep 1
    echo " advanced config. Press 'y' and 'enter' for auto config."
    sleep 1
    echo " A web browser will open, log into your google account and grant"
    sleep 1
    echo " permission. Close the browser then press 'n' and 'enter' for team"
    sleep 1
    echo " drive. Press 'y' and 'enter'. if you want to add another google"
    sleep 1
    echo " drive connection press 'n' for new remote and go through the"
    sleep 1
    echo " process again. You can always add another connection at any time."
    sleep 1
    echo " When you are done press 'q' and 'enter' to quit this config setup."
    sleep 1
    read -p " Press enter when you are ready to proceed." nothing
  elif [ "$LEN1" -gt 0 ]; then
    echo " You've done this before. Just read and follow the instructions and"
    echo " you'll be fine."
  fi
  # Configure rclone
  rclone config
#  echo '[barney]' >> $RC1
#  echo '[ketchup]' >> $RC1

  get_new_connections
  LEN2="${#NEW_CONNECTIONS[@]}"
#  echo "${RCSOURCES1[@]}"
#  echo "${RCSOURCES2[@]}"
#  echo "${NEW_CONNECTIONS[@]}"
#  sleep 5

  if [ "$LEN2" -gt 1 ]; then
    echo " Do you want to use any of these accounts to also download from emails?"
    select i in "Yes" "No"; do
      if [ "$i" == "Yes" ]; then


        while true; do
          echo " Select which google account you want to setup to download from emails?"
          select C in "${NEW_CONNECTIONS[@]}" "Finished"; do
            if [ "$C" == "Finished" ]; then
              z=1; break
            elif [[ "${NEW_CONNECTIONS[@]}" =~ "$C" ]]; then
              echo " Is this your email address : $C@gmail.com ?"
              select i in "Yes" "No"; do
                if [ "$i" == "Yes" ]; then
                  EMAILID=$C
                  break
                elif [ "$i" == "No" ]; then
                  get_email_id
                  lnum=$(grep -n "$C" "$RC1" | cut -d: -f1)
                  sed -i "${lnum}s/$C/$EMAILID/" $RC1
#                  echo "${RCSOURCES1[@]} : ${RCSOURCES2[@]}"
#                  RCSOURCES1=()
#                  get_RCSOURCES
#                  echo "${RCSOURCES1[@]}"
#                  RCSOURCES1+=( $EMAILID )
#                  get_new_connections
#                  echo "${NEW_CONNECTIONS[@]}"
#                  sleep 5
                  break
                else
                  echo "$ERR_REPLY1"
                fi
              done
#              echo "should get email password here"
              get_email_passwd
              create_mail_file
              z=0; break
            else
              echo "$ERR_REPLY1"
              z=0; break
            fi
          done
#          echo " the value of z is $z"
          if [ "$C" == "Finished" ]; then unset z; break; fi
        done
        break
      elif [ "$i" == "No" ]; then
        break
      else
        echo "$ERR_REPLY1"
      fi
    done
  else
    for C in "${NEW_CONNECTIONS[@]}"; do
      echo " The name you provided is $C"
      echo " Do you want to use this account to also download pictures from email?"
      select i in "Yes" "No"; do
        if [ "$i" == "Yes" ]; then
          echo " Is this your email address : $C@gmail.com ?"
          select i in "Yes" "No"; do
            if [ "$i" == "Yes" ]; then
              EMAILID=$C
              break
            elif [ "$i" == "No" ]; then
              get_email_id
              lnum=$(grep -n "$C" "$RC1" | cut -d: -f1)
              sed -i "${lnum}s/$C/$EMAILID/" $RC1
              break
            else
              echo "$ERR_REPLY1"
            fi
          done
          get_email_passwd
          create_mail_file
          break
        elif [ "$i" == "No" ]; then
          break
        else
          echo "$ERR_REPLY1"
        fi
      done
    done
  fi
  sudo cp $RC1 $RC2
}

remove_cloud_account() {
  echo " To delete a cloud account connection, on the next menu, hit d for"
  echo " delete, then choose which connection you want to delete. Press q"
  echo " when you are finished to exit."
  rclone config
  sudo cp $RC1 $RC2
}

add_new_email_connection() {
  echo " Do you want to setup a new email account?"
  select i in "Yes" "No"; do
    if [ "$i" == "Yes" ]; then
      echo " Will this email have its own google drive?"
      select i in "Yes" "No"; do
        if [ "$i" == "Yes" ]; then
          echo " Have you already setup the google drive connection?"
          select i in "Yes" "No"; do
            if [ "$i" == "Yes" ]; then
              get_RCSOURCES
              echo " Select which google drive connection you want to use with this email connection."
              select f in "${RCSOURCES1[@]}" "None"; do
                echo " You selected $f"
                if [ "$f" == "None" ]; then
                  setup_cloud_account
                  break
                elif [[ "${RCSOURCES1[@]}" =~ "$f" ]]; then
                  echo " Is this your email address : $f@gmail.com ?"
                  select i in "Yes" "No"; do
                    if [ "$i" == "Yes" ]; then
                      EMAILID=$f
                      break
                    elif [ "$i" == "No" ]; then
                      get_email_id
                      lnum=$(grep -n "$C" "$RC1" | cut -d: -f1)
                      sed "${lnum}s/$C/$EMAILID/" $RC1
                      break
                    else
                      echo "$ERR_REPLY1"
                    fi
                    get_email_passwd
                    create_mail_file
                  done
                  break
                else
                  echo "$ERR_REPLY1"
                fi
              done
              break
            elif [ "$i" == "No" ]; then
              setup_cloud_account
              break
            else
              echo "$ERR_REPLY1"
            fi
          done
          break
        elif [ "$i" == "No" ]; then
          get_email_id
          get_email_passwd
          create_mail_file
          break
        else
          echo "$ERR_REPLY1"
        fi
      done
      break
    elif [ "$i" == "No" ]; then
      echo " You selected No. Going back."
      break
    else
      echo "$ERR_REPLY1"
    fi
  done
}

remove_email_connection() {
  readarray -t MAILSOURCES < <( find "$BIN_DIR" -name "*.mail.py" -type f 2>/dev/null | rev | cut -d/ -f1 | rev | cut -d. -f1 )
  LEN="${#MAILSOURCES[@]}"
  if [ "$LEN" -lt 1 ]; then
    echo " There aren't any email connections to delete."
    sleep 2
  else
    while true; do
      echo " Select which email you would like to remove the connection to."
      select C in "${MAILSOURCES[@]}" "Done"; do
        if [ "$C" == "Done" ]; then
          break
        elif [[ "${MAILSOURCES[@]}" =~ "$C" ]]; then
          rm "$BIN_DIR"/"$C".mail.py
          sudo rm "$DIR"/"$C".mail.py
          break
        else
          echo "$ERR_REPLY1"
          break
        fi
      done
      if [ "$C" == "Done" ]; then break; fi
    done
  fi
}

setup_master() {
  . ~/pic_frame/src/Display_Settings
  . ~/pic_frame/src/System_Tools

  change_filesharing_password &&
  setup_cloud_account &&
  add_new_email_connection &&
  echo " Would you like to download pictures from these connections now?"
  select i in "Yes" "No"; do
    if [ "$i" == "Yes" ]; then
      download_pics
      break
    elif [ "$i" == "No" ]; then
      break
    else
      echo "$ERR_REPLY1"
    fi
  done
  use_default_slideshow_settings &&

  f1="$BAK_DIR/display_on.timer.backup"
  f2="$SYS_DIR/display_on.timer"
  sudo cp $f1 $f2
  read -p "Enter the time of day you want the display to turn on. 7:00 is 7 am, 19:00 is 7 pm. : " f3
  sudo sed -i "s/7:00/$f3/" "$f2"

  f1="$BAK_DIR/display_off.timer.backup"
  f2="$SYS_DIR/display_off.timer"
  sudo cp $f1 $f2
  read -p "Enter the time of day you want the display to turn off. 7:00 is 7 am, 19:00 is 7 pm. : " f3
  sudo sed -i "s/21:00/$f3/" "$f2"

  enable_frame_services


  echo " Is there a black border around the screen?"
  select OPT in "Yes" "No"; do
    if [ "$OPT" == "" ]; then
      echo " Invalid option. Please try again."
    elif [ "$OPT" == "Yes" ]; then
      OVERSCAN=1
      break
    elif [ "$OPT" == "No" ]; then
      OVERSCAN=0
      break
    else
      echo "Something went wrong. Please try again."
    fi
  done
  sudo raspi-config nonint do_overscan $OVERSCAN

  change_system_password &&
  change_system_name &&

echo " Would you like to dismiss the desktop now?"
  select OPT in "Yes" "No"; do
    if [ "$OPT" == "" ]; then
      echo " invalid option. Please try again."
    elif [ "$OPT" == "Yes" ]; then
      sudo raspi-config nonint do_boot_behaviour B2 &&
      sudo cp $PICTUREFRAME_AUTOSTART $AUTOSTART_FILE &&
      sudo reboot
      break
    elif [ "$OPT" == "No" ]; then
      echo " You have chosen to leave the desktop on. The slideshow will not work until it is disabled."
      break
    else
      echo " Invalid option. Please try again."
    fi
  done
}

Back() {
  echo " This is function 7"
}

