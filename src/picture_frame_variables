#!/bin/bash

#My system variables
DIR=/usr/local/bin
MY_IP=$(if [[ "$(grep 'wlan0' < <(ip -h address ) | grep 'inet')" != "" ]]; then ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}'; else echo "localhost"; fi)
my_gateway=$(ip route get 8.8.8.8 | awk -F"via " 'NR==1{split($2,a," ");print a[1]}')
PS3=" Choose an option. : " #select function prompt
NOW=$(date +"%D_%T")
BAK_DIR="$HOME/pic_frame/backups"

BIN_DIR="$HOME/pic_frame/bin"
ANY_CHAR="[a-zA-Z0-9]"

#Frame config variables
FRAME_PY="$HOME/PictureFrame2020.py"
FRAME_PY_BACKUP="$BAK_DIR/PictureFrame2020.py.backup"
FRAME_CONFIG="$HOME/pi3d_demos/PictureFrame2020config.py" #file to be manipulated
FRAME_CONFIG_BACKUP="$BAK_DIR/PictureFrame2020config.py"
FRAME_CONFIG_EDIT="$HOME/PictureFrame2020config.py"
FRAME_CONFIG_LAST="$BAK_DIR/last_config.backup"
bname=$(basename "$FRAME_CONFIG") #filename without directory path
FRAME_CONFIG_EDIT="$HOME"/"$bname" #copy of file to be manipulated
FADE_TYPE=( "blend" "burn" "bump" ) #array of  transition types

#Menu script variables
SRC_DIR=~/pic_frame/src
F=$SRC_DIR/Main_Menu
MENU_PATH=$(basename "$F")
ERR_REPLY1=" Invalid option. Please select one of the listed options."

#Download script variables
SOURCES=( "emails" "gdrive" )
UPDAT_DIR=$HOME/.frame_updates
#LOG2=$UPDAT_DIR/update_log.txt
#LOG1=$UPDAT_DIR/download_log.txt
EMAILS=$BIN_DIR/get_images_from_emails.py
EMAILS_FIL=$(basename "$EMAILS")
EMAILS_BACKUP=$HOME/pic_frame/backups/$EMAILS_FIL.backup
TEMP_EMAILS=/attachments
TEMPDIR=$HOME/temp
JUNK=$HOME/unknown_file_types
DIRNOW=$(date +"%H-%M")

#SCRIPT="${0##*/}" #basename of this script
#DIR="$( cd "$( dirname "$0" )" >/dev/null 2>&1 && pwd )" #directory path of this script
BIN_DIR="$HOME/pic_frame/bin"
BAK_DIR="$HOME/pic_frame/backups"
SYS_DIR="$HOME/pic_frame/systemd"
SRC_DIR="$HOME/pic_frame/src"
sysdir="/etc/systemd/system"
LOG_DIR="$HOME/pic_frame/logs"
LOG1="$LOG_DIR/download_log.txt"
LOG2="$LOG_DIR/update_log.txt"
MODEL=$(cat /proc/device-tree/model | awk -F"Pi " 'NR==1{split($2,a," ");print a[1]}')
IP_FILE="/etc/dhcpcd.conf"
IP_FILE_BACKUP="$HOME/pic_frame/backups/dhcpcd.conf.backup"
IP_FILE_EDIT="$HOME/dhcpcd.conf"
SMB_CONF=/etc/samba/smb.conf
SMB_CONF_BACKUP=$BAK_DIR/smb.conf.backup
SMB_EDIT=$HOME/smb.conf
AUTOSTART_FILE="/etc/xdg/lxsession/LXDE-pi/autostart"
AUTOSTART_FILE_BACKUP="$BAK_DIR/autostart.backup"
PICTUREFRAME_AUTOSTART="$BAK_DIR/autostart.pictureframe"
PI3DIR="$HOME/pi3d_demos"
pfpy="PictureFrame2020.py"
pfcpy="PictureFrame2020config.py"
RC1=$HOME/.config/rclone/rclone.conf
RC2=/root/.config/rclone/rclone.conf
#RC1=$HOME/fake_rclone.conf
#RC2=$HOME/fake_rclone.conf.copy
readarray -t MAIN_DIRS < <( find $HOME/Pictures -maxdepth 1 -type d )
readarray -t SUB_DIRS < <( find $HOME/Pictures -mindepth 1 -type d )

TIME_OPTIONS=( "time_delay" "fade_time" )
BACKGROUND_OPTIONS=( "background" "blur_edges" "blur_amount" "blur_zoom" "edge_alpha" )
SPECIAL_OPTIONS=( "blend_type" "recent_n" "fit" "kenburns" "shuffle" )
DIR_OPTIONS=( "pic_dir" "subdirectory" )
TEXT_OPTIONS=( "show_text_tm" "show_text_fm" "show_text_sz" "show_text" "text_width" "load_geoloc" "geo_key" "geo_path" )
ADMIN_OPTIONS=( "check_dir_tm" "verbose" "fps" "no_files_img" "keyboard" "use_mqtt" "mqtt_server" "mqtt_port" "mqtt_login" "mqtt_password" "font_file" "shader" "reshuffle_num" "auto_resize" "delay_exif" "locale" "display_x" "display_y" "display_w" "display_h" )
ALL_OPTIONS=( "${TIME_OPTIONS[@]}" "${BACKGROUND_OPTIONS[@]}" "${SPECIAL_OPTIONS[@]}" "${DIR_OPTIONS[@]}" "${TEXT_OPTIONS[@]}" "${ADMIN_OPTIONS[@]}" )

T_F_OPTIONS=( "blur_edges" "verbose" "keyboard" "use_mqtt" "fit" "kenburns" "shuffle" "auto_resize" "delay_exif" "load_geoloc" )
ENTER_VALUE_OPTIONS=( "blur_amount" "check_dir_tm" "edge_alpha" "fps" "mqtt_port" "pic_dir" "subdirectory" "mqtt_login" "mqtt_password" "recent_n" "reshuffle_num" "show_text_tm" "show_text_fm" "show_text_sz" "show_text" "text_width" "time_delay" "fade_time" "blur_zoom" "locale" "geo_key" "display_x" "display_y" "display_w" "display_h" )

OPTIONS1=( "blur_amount" "blur_edges" "check_dir_tm" "edge_alpha" "fps" "keyboard" "recent_n" "show_text_tm" "show_text_sz" "text_width" "kenburns" "time_delay" "fade_time" "blur_zoom" "auto_resize" "display_x" "display_y" "display_w" "display_h" "verbose" "mqtt_port" "reshuffle_num" "delay_exif" )
OPTIONS2=( "blend_type" "mqtt_server" "no_files_img" "subdirectory" "geo_path" "geo_key" "locale" "show_text_fm" "mqtt_login" "mqtt_password" "font_file" "shader" )
OPTIONS3=( "use_mqtt" )
OPTIONS4=( "fit" "load_geoloc" )
OPTIONS5=( "show_text" )
OPTIONS6=( "background" )
OPTIONS7=( "pic_dir" )
OPTIONS8=( "${OPTIONS1[@]}" "${OPTIONS2[@]}" "${OPTIONS3[@]}" "${OPTIONS4[@]}" "${OPTIONS5[@]}" "${OPTIONS6[@]}" "${OPTIONS7[@]}" )


continue_prompt() {
read -p ' If you understand and are ready to continue, hit enter. ' nothing &&
unset nothing
}

get_file() {
  sudo cp $FRAME_CONFIG $FRAME_CONFIG_EDIT
}

line_setting() {
  if [[ "${OPTIONS7[@]}" =~ "$VAR" ]]; then
    lnum=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d: -f1) #VARiable = line number of config setting.
    VAR1=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d\" -f2) #VARiable = current config setting.
  elif [[ "${OPTIONS6[@]}" =~ "$VAR" ]]; then
    lnum=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d: -f1) #VARiable = line number of config setting.
    VAR1=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d\( -f2 | cut -d\) -f1) #VARiable = current config setting.
  elif [[ "${OPTIONS5[@]}" =~ "$VAR" ]]; then
    lnum=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d: -f1) #VARiable = line number of config setting.
    VAR1=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d\" -f2) #VARiable = current config setting.
  elif [[ "${OPTIONS4[@]}" =~ "$VAR" ]]; then
    lnum=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d: -f1) #VARiable = line number of config setting.
    VAR1=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d, -f1) #VARiable = current config setting.
  elif [[ "${OPTIONS3[@]}" =~ "$VAR" ]]; then
    lnum=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d: -f1) #VARiable = line number of config setting.
    VAR1=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d\) -f1) #VARiable = current config setting.
  elif [[ "${OPTIONS2[@]}" =~ "$VAR" ]]; then
    lnum=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d: -f1) #VARiable = line number of config setting.
    VAR1=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d\" -f2) #VARiable = current config setting.
  elif [[ "${OPTIONS1[@]}" =~ "$VAR" ]]; then
    lnum=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d: -f1) #VARiable = line number of config setting.
    VAR1=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d, -f1) #VARiable = current config setting.
  fi
}


#displays help of any setting that has one
show_help() {
  echo " ##########     ${VAR^^}     ##########"
  echo ""
  if [ "$(grep "\-$VAR\"" "$FRAME_CONFIG_EDIT" | grep "help")" != "" ]; then
    HELP=$(grep -n "\-$VAR\"" "$FRAME_CONFIG_EDIT" | grep "help" | rev | cut -d\" -f2 | rev)
    echo " ########## Helper Hint ##########"
    echo " ###   $VAR : help= : $HELP   ###"
    echo ""
  else echo " ###   $VAR does not have a help hint.   ###"
  fi
  if [ "$(grep "\-$VAR\"" "$FRAME_CONFIG_EDIT" | grep "int")" != "" ]; then
    echo " #####  Must be a whole number.  #####"
  elif [ "$(grep "\-$VAR\"" "$FRAME_CONFIG_EDIT" | grep "float")" != "" ]; then
    echo " #####  Can be a whole number or a decimal.  #####"
  elif [ "$(grep "\-$VAR\"" "$FRAME_CONFIG_EDIT" | grep "str_to_bool")" != "" ] || [ "$VAR" == "use_mqtt" ]; then
    echo " #####  Must be either True or False.  #####"
    echo " ##### Answering Yes will enter True, No will enter False.  #####"
  fi
  echo "" && echo " $VAR is currently set at $VAR1" && echo ""
}

show_prompt() {
  case "$VAR" in
    blur_amount)
      echo " This setting controls how blurry the background is."
      ;;
    blur_edges)
      echo " This setting allows you to use the blurred background. Would you like to turn it on?"
      ;;
    check_dir_tm)
      echo " This setting controls how frequently to look for new pictures."
      echo " If new pictures are found the slideshow will start over."
      echo " There is no real need to change this setting."
      ;;
    verbose)
      echo " This setting is used for debugging. No need to change it."
      ;;
    edge_alpha)
      echo " This setting interacts with the background and blur_amount settings"
      echo " to effect how the background image is displayed."
      ;;
    fps)
      echo " This is the frames per second setting."
      echo " No need to change unless there are performance issues."
      ;;
    background)
      echo " This allows you to adjust the color of the background."
      echo " Adjust RGB values to adjust the color and alpha to adjust the intensity."
      ;;
    no_files_img)
      echo " This is the image that will be displayed if your Pictures directory is empty"
      echo " or if there is an error in the config file. You can set this to the image of your choice."
      echo " Enter the full path of the image you want to set as the default."
      ;;
    blend_type)
      echo " Select which type of transition you want to use."
      echo " You may choose between blend, burn, and bump only."
      ;;
    keyboard)
      echo " If you leave the keyboard enabled, you can interupt the slideshow with the esc key."
      echo " and return to the command prompt. (Slideshow will automatically restart after 30 seconds)"
      echo " You can also use the arrow keys to go backward and forward through the pictures."
      echo " Would you like to leave the keyboard enabled?"
      ;;
    use_mqtt)
      echo " With the right app (There are several), you can use your smartphone as a remote control."
      echo " The process is not the easiest to setup and is not recommended for people that aren't"
      echo " very tech savy. If you want to learn more or find more information about it, check out"
      echo " this website: www.thedigitalpictureframe.com and find the articles about MQTT."
      echo " Would you like to enable MQTT?"
      ;;
    mqtt_server)
      echo " In most cases this will be your ip address and will be automatically entered"
      echo " if you enabled MQTT. If you know enough about MQTT to want it set to other than"
      echo " your ip address, then you will likely know how to edit the file manually."
      ;;
    mqtt_port)
      echo " Default port is 1883 and should not need to be changed. If you know enough about"
      echo " MQTT to want it set to other than the default port number, then you will likely"
      echo " know how to edit the file manually."
      ;;
    mqtt_login)
      echo " In case you want to secure your MQTT connection you will need to enter your login ID."
      ;;
    mqtt_password)
      echo " In case you want to secure your MQTT connection you will need to enter your login password."
      ;;
    recent_n)
      echo " Enter the number of most recent pics to keep at the start of the slideshow."
      ;;
    font_file)
      echo " If you chose to show text, you can also choose your own font file."
      echo " Enter the full path of the file you want to use."
      ;;
    pic_dir)
      echo " You can change the directory the slideshow looks for pictures in."
      echo " Enter the full path of the directory you want to use."
      ;;
    shader)
      echo " You can change the shader file used by the slideshow."
      echo " WARNING!!! Changing this file could have unknown side-effects."
      echo " Enter the full path of the shader file you want to use."
      ;;
    reshuffle_num)
      echo " This is how many times the slideshow will be played before being reshuffled."
      echo " Leave set to 1 if you want it to always reshuffle."
      echo " Enter the number of times to play through before reshuffling."
      ;;
    show_text_tm)
      echo " If you choose to show text, you can set the length of time that text is displayed."
      echo " Set to 0 if you don't want to show text at all."
      echo " Enter a time in seconds for the text to show."
      ;;
    show_text_fm)
      echo " This allows you to change the format of the info displayed when show_text is enabled."
      echo " Enter your desired format."
      ;;
    show_text_sz)
      echo " You can change the size of the text displayed."
      echo " Enter a number."
      ;;
    show_text)
      echo " Leave blank or see help above"
      echo " You can try entering something."
      ;;
    text_width)
      echo " See help above."
      echo " Enter a number."
      ;;
    fit)
      echo " Leave enabled to prevent unwanted cropping of pictures."
      echo " Leave enabled?"
      ;;
    kenburns)
      echo " Turn your pictures into moving images using the Ken Burns effect. This is the same"
      echo " zoom and panning effect used in old war documentaries to give motion to old still images."
      echo " Do you want to use the Ken Burns effect?"
      ;;
    time_delay)
      echo " This is the length of time each picture is displayed, measured in seconds."
      echo " Enter 60 for 1 minute, 120 for 2 minutes, 300 for 5 minutes, etc."
      echo " Enter a length of time in seconds."
      ;;
    fade_time)
      echo " This is the length of time the transition should take."
      echo " Enter a length of time in seconds."
      ;;
    shuffle)
      echo " Leave enabled to keep shuffle turned on."
      echo " Would you like to leave it enabled?"
      ;;
    subdirectory)
      echo " If left blank, slideshow will display pictures from all sub-directories of the pic_dir."
      echo " If a sub directory is selected it will display only from that directory."
      echo " Enter a sub-directory name."
      ;;
    blur_zoom)
      echo " This governs how much zoom is used on the image to create the blurred background."
      ;;
    auto_resize)
      echo " See help above."
      ;;
    delay_exif)
      echo " See help above."
      ;;
    locale)
      echo " See help above."
      ;;
    load_geoloc)
      echo " See help above."
      ;;
    geo_key)
      echo " See help above."
      ;;
    geo_path)
      echo " See help above."
      ;;
    display_x)
      echo " See help above."
      ;;
    display_y)
      echo " See help above."
      ;;
    display_w)
      echo " See help above."
      ;;
    display_h)
      echo " See help above."
      ;;
  esac
  echo ""
  echo ""
}

save_input() {
  if [[ "$(grep "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -c1)" =~ $ANY_CHAR ]]; then
    if [ "$VAR" == "use_mqtt" ]; then
      sed -ri "${lnum}s/default=${VAR1}\)/default=${VAR2}\)/" $FRAME_CONFIG_EDIT
      if [ "$VAR2" == "True" ]; then
        VAR="mqtt_server"
        line_setting
        VAR2="$MY_IP"
        sed -ri "${lnum}s/default=\"${VAR1}\"/default=\"${VAR2}\"/" $FRAME_CONFIG_EDIT
      fi
    else
      sed -ri "${lnum}s/default=${VAR1},/default=${VAR2},/" $FRAME_CONFIG_EDIT
    fi
  else
    if [ "$VAR" == "background" ]; then
      sed -ri "${lnum}s/default=\(${VAR1}\),/default=\(${VAR2}\),/" $FRAME_CONFIG_EDIT
    else
      sed -ri "${lnum}s/default=\"${VAR1}\"/default=\"${VAR2}\"/" $FRAME_CONFIG_EDIT
    fi
  fi
#  unset VAR2
}

get_input() {
  if [[ "${T_F_OPTIONS[@]}" =~ "$VAR" ]]; then
    select OPT in "Yes" "No" "Don't Change"; do
      if [ "$OPT" == "Don't Change" ]; then
        VAR2="$VAR1"; break
      elif [ "$OPT" == "Yes" ]; then
        VAR2=True; break
      elif [ "$OPT" == "No" ]; then
        VAR2=False; break
      else
        VAR2="$VAR1"; break
      fi
    done
  elif [[ "${ENTER_VALUE_OPTIONS[@]}" =~ "$VAR" ]]; then
    if [ "$VAR" == "pic_dir" ]; then
      echo " Select which directory you want to use as the primary pictures folder."
      select d in "${MAIN_DIRS[@]}"; do
        if [[ "${MAIN_DIRS[@]}" =~ "$d" ]]; then
          VAR2="$d"
          break
        else
          echo "$ERR_REPLY1"
        fi
      done
    elif [ "$VAR" == "subdirectory" ]; then
      echo " Select which subdirectory you want to use."
      select d in "${SUB_DIRS[@]}"; do
        if [[ "${SUB_DIRS[@]}" =~ "$d" ]]; then
          VAR2="$d"
          break
        else
          echo "$ERR_REPLY1"
        fi
        break
      done
    else
      read -p " Enter a new value. : " VAR2
      if [ "$VAR2" == "" ]; then
        VAR2="$VAR1"
      fi
    fi
#    sed -ri "${lnum}s/default=${VAR1},/default=${VAR2},/" $FRAME_CONFIG_EDIT
  elif [ "$VAR" == "background" ]; then
    echo " Enter values for RGBA." &&
    R_VAL="$(grep "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d\( -f2 | cut -d\) -f1 | cut -d, -f1)"
    G_VAL="$(grep "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d\( -f2 | cut -d\) -f1 | cut -d, -f2 | cut -d\  -f2)"
    B_VAL="$(grep "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d\( -f2 | cut -d\) -f1 | cut -d, -f3 | cut -d\  -f2)"
    A_VAL="$(grep "\-$VAR\"" "$FRAME_CONFIG_EDIT" | cut -d= -f2 | cut -d\( -f2 | cut -d\) -f1 | cut -d\  -f4)"
    read -p " Enter a value for red. Default is 0.0 : " RED_INPUT &&
    read -p " Enter a value for green. Default is 0.0 : " GREEN_INPUT &&
    read -p " Enter a value for blue. Default is 0.0 : " BLUE_INPUT &&
    read -p " Enter a value for alpha. Default is 1.0 : " ALPHA_INPUT &&
    if [ "$RED_INPUT" == "" ]; then RED_VAL="$R_VAL"; else RED_VAL="$RED_INPUT"; fi
    if [ "$GREEN_INPUT" == "" ]; then GREEN_VAL="$G_VAL"; else GREEN_VAL="$GREEN_INPUT"; fi
    if [ "$BLUE_INPUT" == "" ]; then BLUE_VAL="$B_VAL"; else BLUE_VAL="$BLUE_INPUT"; fi
    if [ "$ALPHA_INPUT" == "" ]; then ALPH_VAL="$A_VAL"; else ALPHA_VAL="$ALPHA_INPUT"; fi
    VAR2="$RED_VAL, $GREEN_VAL, $BLUE_VAL, $ALPHA_VAL"
  elif [ "$VAR" == "blend_type" ]; then
    select i in "${FADE_TYPE[@]}"; do
      if [ "$i" == "" ]; then
        echo " $ERR_REPLY1"
      elif [[ "${FADE_TYPE[@]}" =~ $i ]]; then
        VAR2="$i"
        break
      else
        VAR2="$VAR1"
        break
      fi
    done
  fi
}



replace_file() {
  echo " Decision time. Do you want to save and use these settings?"
  select i in "Yes" "No" "I don't know"; do
    if [ "$i" == "" ]; then
      echo "$ERR_REPLY1"
    elif [ "$i" == "I don't know" ]; then
      echo " I don't understand why you have to be so indecisive. This isn't a hard decision."
      echo " In fact, I'll make it easy for you. If you say yes,  will backup the current"
      echo " settings and if you don't like the changes, you can restore the current settings."
      echo " So stop being a mental weakling and make a decision. Neither of us has all day."
      echo " Yes or No. What's it gonna be?"
    elif [ "$i" == "No" ]; then
      echo " You have chosen not to use these settings. Throwing away your changes."
      sudo rm $FRAME_CONFIG_EDIT
      break
    elif [ "$i" == "Yes" ]; then
      echo " Backing up current file."
      sudo cp $FRAME_CONFIG $FRAME_CONFIG_LAST
      echo " Moving new settings."
      sudo mv $FRAME_CONFIG_EDIT $FRAME_CONFIG
      echo " Restarting slideshow"
      sudo systemctl restart pi3donpi4.service
      break
    fi
  done
}

change_setting() {
  line_setting
  show_help
  show_prompt
  get_input
  save_input
}


select_options() {
  while true; do
    clear
    echo " ####################  ${OPTION_SET^^}  ####################"
    select i in "${THESE_OPTIONS[@]}" "Finished"; do
      if [ "$i" == "" ]; then
        echo "$ERR_REPLY1" && sleep 1
        break
      elif [ "$i" == "Finished" ]; then
        break
      elif [[ "${THESE_OPTIONS[@]}" =~ "$i" ]]; then
        VAR="$i"
        change_setting
        break
      else
        echo "$ERR_REPLY1"
      fi
    done
    clear
    if [ "$i" == "Finished" ]; then break; fi
  done
}




#################################   Slideshow Config Setting Functions    ####################################




##############################################################################################

######################   Menu Functions    ###################################################

set_src() {
  SRC=$F
  HEADER=$MENU_PATH
  SUB_HEADER=$(if [ ! "$HEADER" == "Main_Menu" ]; then echo "${HEADER##*/}"; else echo "$HEADER"; fi)
  set_menu
}

advance_menu() {
  MENU_PATH="$MENU_PATH"/"$OPT"
  F="$SRC_DIR"/"$OPT"
  set_src
}

go_back() {
  F="$SRC_DIR"/$(echo "$MENU_PATH" | rev | cut -d/ -f2 | rev)
  MENU_PATH=${MENU_PATH%/*}
  set_src
}


set_menu() {
  MENU="$(grep -E '^[[:space:]]*([[:alnum:]_]+[[:space:]]*\(\)|function[[:space:]]+[[:alnum:]_]+)' $SRC | cut -d\( -f1)"
  readarray -t OPTIONS < <( grep -E '^[[:space:]]*([[:alnum:]_]+[[:space:]]*\(\)|function[[:space:]]+[[:alnum:]_]+)' $SRC | cut -d\( -f1 )
}

yes_no() {
  OPTIONS=( "Yes" "No" )
  select i in "${OPTIONS[@]}"; do
    if [ "$i" == "" ]; then
      echo " Invalid option. Please try again."
    elif [ "$i" == "Yes" ]; then
      VAR2=True; break
    elif [ "$i" == "No" ]; then
      VAR2=False; break
    else
      echo " Invalid option. Please try again."
    fi
  done
}

#####################################################################################################################

get_RCSOURCES() {
  readarray -t RCSOURCES1 < <(grep "\[[a-zA-Z0-9]*\]" $RC1 2>/dev/null | cut -d[ -f2 | cut -d] -f1)
}


get_new_connections() {
  RCSOURCES2=()
  readarray -t RCSOURCES2 < <(grep "\[[a-zA-Z0-9]*\]" $RC1 2>/dev/null | cut -d[ -f2 | cut -d] -f1)
  for F in "${RCSOURCES2[@]}"; do
    if [[ "${RCSOURCES1[@]}" =~ "$F" ]]; then
      continue
    else
      NEW_CONNECTIONS+=( $F )
    fi
  done
}

get_email_id() {
  echo " You will need to enter your login info for your email account."
  echo " Your google account name is your email address without @gmail."
  read -p " What is your google account name? : " EMAILID
}

get_email_passwd() {
  MAIL_FILE="$BIN_DIR/$EMAILID".mail.py
  if [ -f "$MAIL_FILE" ]; then
    echo " There is already a connection with that name."
  elif [ ! -f "$MAIL_FILE" ]; then
#    sudo cp $EMAILS_BACKUP $MAIL_FILE
    read -p " Enter your google password. : " GPASSWD
    echo " You will need your own secret hashtag for people to insert in the subject line of emails."
    read -p " What would you like your secret hashtag to be? : " HASHTAG
  fi
}


create_mail_file() {
  sudo cp $EMAILS_BACKUP $MAIL_FILE
  sed -i "s/enter-your-gmail-account-name-here/$EMAILID/" "$MAIL_FILE"
  sed -i "s/enter-your-password-here/$GPASSWD/" "$MAIL_FILE"
  sed -i "s/#mypictures/$HASHTAG/" "$MAIL_FILE"
  sudo chmod +x $MAIL_FILE
  sudo ln -sf $MAIL_FILE /usr/local/bin/
  echo " This email connection has been saved as $EMAILID"
}

